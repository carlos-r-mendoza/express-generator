var app = angular.module('ngMyApp', ['ui.router']);

app.config(function ($locationProvider, $urlRouterProvider) {

	// removes # from url
    $locationProvider.html5Mode(true);

    // redirect to 'index' if url does not exist
    $urlRouterProvider.otherwise('/');

});

// Defines our states
app.config(function($stateProvider) {

	// main view 
	$stateProvider
		.state('index', {
			url: '/',
			templateUrl: '/views/index',
			controller: 'MainController'
		})
		// .state('index.friend', {
		// 	// url shows friends name
		// 	url: ':friendName'
		// })
		// .state('index.friend.posts', {
		// 	url: '/posts'
		// })


	// posts views
	$stateProvider
		.state('posts-feed', {
			url: '/posts-feed',
			templateUrl: '/views/posts-feed',
			controller: 'PostsFeedController'
		})
		.state('to-do', {
			url: '/do-do',
			templateUrl: '/views/to-do',
		})

	$stateProvider
		.state('login-page', {
			url: '/login-page',
			templateUrl: '/views/login'
		});	


	// create account states
	$stateProvider
		.state('user-info', {
			url: '/create-account/user-info',
			templateUrl: '/create-account/user-info',
			controller: 'UserInfoController'
		})
		.state('income-info', {
			url: '/create-account/income-info',
			templateUrl: '/create-account/income-info',
			controller: 'UserIncomeController'
		})
		.state('billing-info', {
			url: '/create-account/billing-info',
			templateUrl: '/create-account/billing-info'
		});

});

'use strict';

app.controller('AuthController', ['$scope', 'Session', function($scope, Session){

	$scope.logout = function() {
		console.log("out", Session)
	}

}]);


'use strict';

app.controller('CreateAccountController', ['$scope', '$state', 'NewUser', function($scope, $state, NewUser) {

	// creates new user object to pass from state to state
	$scope.newUser = NewUser.create();

	// invalid password message
	$scope.userNameUnavailable = false;
	$scope.passwordLengthMessage = true;
	$scope.passwordNotMatchingMessage = false;

	// saves user
	$scope.saveUser = function(newUser) {
		// check for username availability
		NewUser.verifyUsername(newUser.username)
			.then(function(data){
				if (data.message === 'failed') {
					// username unavailable
					console.log('failed')
					$scope.userNameUnavailable = true;
				} else if (data.message === 'success' && newUser.password === newUser.confirmPassword) {
					// username available
					// update user in NewUser factory
					NewUser.update(newUser);
					// go to next step/state
					$state.go('user-info');
				}
			})
	};

	// watch password matching
	$scope.$watchCollection('newUser', function(new_val, old_val) {

		if(new_val.password >= 5) {
			$scope.passwordLengthMessage = false;
		} else { $scope.passwordLengthMessage = true; }

		if(new_val.confirmPassword && new_val.confirmPassword.length >= 5) {
			if(new_val.confirmPassword === new_val.password) {
				$scope.passwordNotMatchingMessage = false;
			} else { $scope.passwordNotMatchingMessage = true; }
		} else {
			$scope.passwordNotMatchingMessage = false;
		}

	});




}]);

'use strict';

app.controller('MainController', ['$scope', '$state', 'Users', 'Posts', 'Comments', 'Auth', '$rootScope', function($scope, $state, Users, Posts, Comments, Auth, $rootScope) {
		
		//search friends
		$scope.search = '';

		//used to toggle ng-class in navigation bar
		$scope.navigation = '';

		Auth.getUserInfo()
			.then(function(data){
				console.log('ad', data)
				$scope.current_user = data;
				$scope.title = 'Welcome ' + $scope.current_user.username + '!';
				$rootScope.showLogoutBtn = true;
				// console.log(data.photos[0].value)
				// $rootScope.current_user_pic = data.photos[0].value;
			})


		//gets all users
		Users.get()
			.then(function(data){
				$scope.users = data;
			});

		//message displayed in profile/posts section when page is first loaded
		$scope.welcome_message = true;

		// defines user when toggleProfile is triggered
		$scope.user;

		//gets user's posts when view profile button is clicked
		$scope.toggleProfile = function(user) {

			$scope.user = user;

			//modifies view
			$scope.welcome_message = false;
			$scope.profile_posts = false;
			$scope.profile_details = true;
			//populates user details
			$scope.user_details = user;
			var friendName = user.name.replace(/\s/g, '-');

			$scope.selected_user = user.name;

			console.log('name', user.name)
			//$state.go('index.friend', { friendName: friendName});
		} 

		//profile button logic
		$scope.showUserProfile = function() {
			$scope.profile_posts = false;


			$scope.profile_details = true;
		}

		//posts button logic
		$scope.showUserPosts = function() {
			$scope.profile_details = false;


			//gets user's posts
			Posts.getByUserId($scope.user.id)
				.then(function(data){
					$scope.user_posts = data;
				})

			$scope.profile_posts = true;
			// $state.go('index.friend.posts');


		}

		//gets post's comments when see comments button is clicked
		$scope.togglePostComments = function(post) {
			Comments.getByPostId(post.id)
				.then(function(data){
					post.comments = data;
				})
		}

	}]);

'use strict';

app.controller('PostsFeedController', ['$scope', 'Posts', function($scope, Posts){
		
		Posts.get()
			.then(function(data){
				$scope.all_posts = data;
			});

	}]);

'use strict';

app.controller('UserIncomeController', ['$scope', '$state', 'NewUser', function($scope, $state, NewUser) {

	// gets new user object to pass from state to state
	$scope.newUser = NewUser.get();

	// only shows if co-signer required
		// co-signer requires if assets are < 40k
	$scope.requireCosigner = false;
	$scope.showCosignerMessage = "";

	// saves user
	$scope.saveUser = function(newUser) {

		// update user
		NewUser.update(newUser);

		// validate assets is > 40k
		var assets = newUser.income.salary + newUser.income.checking + newUser.income.savings;

		if(assets >= 40000) {
			$state.go('billing-info');
		} else if(assets < 40000 && assets >= 20000) {
			$scope.requireCosigner = true;
			$scope.showCosignerMessage = "Your income is less than 40k. Therefore, a co-signer is required for you to open an account."
		} else {
			NewUser.verifyIncome(assets)
				.then(function(data){
					console.log('hello')
				})
		}

	};

}]);

'use strict';

app.controller('UserInfoController', ['$scope', '$state', 'States', 'NewUser', function($scope, $state, States, NewUser) {



	// NewUser.verifyAddress()	
	// 	.then(function(data){
	// 		console.log('this is it', data);
	// 	})

	// populats states in form
	$scope.states = States.get();
	// gets new user object to pass from state to state
	$scope.newUser = NewUser.get();
	// invalid zip code message
	$scope.invalidZip = "Sorry, that's an invalid ZipCode."
	// sets cities to empty array on initialization 
	$scope.stateCities = [];
	// progress bar
	$scope.progress = 33;
	$scope.stepNumber = 1;

	// saves user
	$scope.saveUser = function(newUser) {
		NewUser.update(newUser);

		// password matching validator
		if(newUser.password === newUser.confirmPassword) {
			$state.go('income-info');
		} else {
			$scope.passwordMessage = "Your passwords must match."
		}

	};

	// get state's cities
	$scope.getCities = function(state) {
		var stateName = state.split(" - ")[1];

		States.getCitiesOfState(stateName)
			.then(function(data){
				$scope.stateCities = data.cities;
			});

	};

	// custom track by function for city ng-repeat
	var cityIdCounter = 0;
	$scope.myTrackingFunction = function(city) {
		return city.id = cityIdCounter += 1;
	}

	// verify zipCode based on city & state
	$scope.verifyZipCode = function() {

		if ($scope.newUser.address.city && 
			$scope.newUser.address.zipCode && 
			$scope.newUser.address.zipCode.toString().length === 5) {

			States.verifyZipCode($scope.newUser.address.zipCode)
				.then(function(data){

					if(data.message) {
						console.log('error');
						$scope.addressValid = false;
						$scope.zipCodeNotValidMessage = true;
						$scope.ZipCodeDoesNotMatchMessage = false;
					} else if($scope.newUser.address.state.split(" - ")[0] === JSON.parse(data).state) {
						$scope.addressValid = true;
						$scope.zipCodeNotValidMessage = false;
						$scope.ZipCodeDoesNotMatchMessage = false;
						console.log('true');
					} else {
						$scope.addressValid = false;
						$scope.zipCodeNotValidMessage = false;
						$scope.ZipCodeDoesNotMatchMessage = true;
						console.log('false');
					}
				});

		}
	
	};



}]);

'use strict';

app.factory('APIConfig', [function() {
	
	return {
		devRoot: 'http://jsonplaceholder.typicode.com',
		prodRoot: '',
		env: 'dev',
		setEnv: function() {

		},
		getRoot: function() {
			if(this.env === 'dev') { //this object
				return this.devRoot;
			} else if (this.env === 'prod') {
				return this.prodRoot;
			}
		}
	}
}]);

app.factory('Users', ['$http', 'APIConfig', function($http, APIConfig) {
	
	return {
		//gets all users		
		get: function() {
			return $http.get(APIConfig.getRoot() + '/users')
					.then(function(response){
						return response.data;
					})
		}
	};	
}]);

app.factory('Posts', ['$http', 'APIConfig', function($http, APIConfig) {
	
	return {
		//gets all posts
		get: function() {
			return $http.get(APIConfig.getRoot() + '/posts')
					.then(function(response){
						return response.data;
					});
		},
		//gets user's posts using user.id
		getByUserId: function(userId) {
			console.log('id', userId)
			return $http.get(APIConfig.getRoot() + '/posts?userId=' + userId)
					.then(function(response){
						console.log('fad',response.data)
						return response.data;
					});
		}
	};
}]);

app.factory('Comments', ['$http', 'APIConfig', function($http, APIConfig) {
	
	return {
		//gets all comments
		get: function() {
			return $http.get(APIConfig.getRoot() + '/comments/')
					.then(function(response){
						return response.data;
					})
		},
		//gets post's comments using post.id
		getByPostId: function(postId) {
			return $http.get(APIConfig.getRoot() + '/comments?postId=' + postId)
					.then(function(response){
						return response.data;
					})			
		}
	}
}]);

app.factory('Auth', ['$http', function($http) {

	return {
		//gets current authenticated user's info
		getUserInfo: function() {
			return $http.get('/authenticatedUserInfo')
					.then(function(response){
						console.log('this is the authenticated', response)
						return response.data;
					});
		}
	};
}]);

app.factory('States', ['$http', function($http) {

	var states = ['AL - Alabama',
		'AK - Alaska',
		'AZ - Arizona',
		'AR - Arkansas',
		'CA - California',
		'CO - Colorado',
		'CT - Connecticut',
		'DC - District of Columbia',
		'DE - Delaware',
		'FL - Florida',
		'GA - Georgia',
		'HI - Hawaii',
		'ID - Idaho',
		'IL - Illinois',
		'IN - Indiana',
		'IA - Iowa',
		'KS - Kansas',
		'KY - Kentucky',
		'LA - Louisiana',
		'ME - Maine',
		'MD - Maryland',
		'MA - Massachusetts',
		'MI - Michigan',
		'MN - Minnesota',
		'MS - Mississippi',
		'MO - Missouri',
		'MT - Montana',
		'NE - Nebraska',
		'NV - Nevada',
		'NH - New Hampshire',
		'NJ - New Jersey',
		'NM - New Mexico',
		'NY - New York',
		'NC - North Carolina',
		'ND - North Dakota',
		'OH - Ohio',
		'OK - Oklahoma',
		'PA - Pennsylvania',
		'RI - Rhode Island',
		'SC - South Carolina',
		'SD - South Dakota',
		'TN - Tennessee',
		'TX - Texas',
		'UT - Utah',
		'VT - Vermont',
		'VA - Virginia',
		'WA - Washington',
		'WV - West Virginia',
		'WI - Wisconsin',
		'WY - Wyoming'];


	return {

		get: function() {
			return states;
		},
		getCitiesOfState: function(stateName) {
			return $http.get('/get-cities-in-state/' + stateName)
				.then(function(response){
					return response.data;
				});
		},
		verifyZipCode: function(zipCode) {
			return $http.get('/verify-zipcode/' + zipCode)
				.then(function(response){
					return response.data;
				});
		}

	}

}]);

app.factory('NewUser', ['$http', function($http) {

	var user = {
		username: null,
		password: null,
		id: null,
		firstName: null,
		lastName: null,
		phone: null,
		email: null,
		address: {
			address1: null,
			address2: null,
			city: null,
			state: null,
			zipCode: null
		},
		income: {
			salary: null,
			checking: null,
			savings: null
		},
		cosigner: {
			firstName: null,
			lastName: null,
			phone: null,
			email: null
		},
		accountApproved: false
	};

	return {

		get: function() {
			return user;
		},
		create: function() {
			return user;
		},
		update: function(newUser) {
			user.username = newUser.username;
			user.password = newUser.password;
		},
		// checks to see if username is available
		verifyUsername: function(username) {
			return $http.post('/verify-username', { username: username })
				.then(function(response) {
					return response.data;
				})
		},
		// checks to see if income is eligible
		verifyIncome: function(assets) {
			return $http.post('/verify-income', { assets: assets })
				.then(function(response) {
					return response.data;
				}); 
		}
	}

}]);


